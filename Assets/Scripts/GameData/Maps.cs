using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public struct MapInfo
{
    public string mapName;
    public string mapCode;
    public int mapId;
    public string[] pathCode;
    public string tileTypeCode;
    public int[] enemies;
    public float[] enemyChance;
    public int enemyMax;
    public float spawnX;
    public float spawnY;
    public int levelMin;
    public int levelMax;
    public float spawnInterval;
   
    
};


[System.Serializable]
public class MapsInfoRoot
{
    public MapInfo MapInfo;
    
}

public class AllMaps
{
    public MapInfo TestMap = new MapInfo
    {
        mapName = "Test Map",
        mapCode = "2020011221301310111011011022211210222010320302130212110201011011201011303330032201221010210111221002013123112012202101200011200221103213100222012121012021020212013123102201012020122012022210003213101011012022122211000000003121210010122100220022111112012010221012100120020120022022111022200021121210211102002111122101211110221011000101220020111020001000211201212221",
        tileTypeCode
        pathCode = new string[1] { "222195192165162135132105102077074047072073070043040013010" },
        enemies = new int[1] { 1,},
        enemyChance = new float[1] { 1000 },
        enemyMax = 50,
        spawnX = 0f,
        spawnY = -194f,
        levelMin = 1,
        levelMax = 4,
        spawnInterval = 40.8f,
        mapId = 0,

    };

    public MapInfo DualPath = new MapInfo
    {
        mapName = "Dual Path Map",
        mapCode = "0212210221221212021011332011121112001222011021113311222002222221200121222133020112121212222221120022332122000100202202000111113301202113103301001212101111320312333033020111020122110120323322111100220122020120210033321302201111021210120220013013320310230201102101202000013233213332220120120221022221333233220220022001011210123300211220020100212121212033011002121200",
        tileTypeCode
        pathCode = new string[2] { "138139164165162135160161186187212213240243270273300303302277276251278", "022023048049074075101126127154157184187214217244247272273298299324325350351" },
        enemies = new int[1] { 1, },
        enemyChance = new float[1] { 1000 },
        enemyMax = 50,
        spawnX = -241f,
        spawnY = -205f,
        levelMin = 1,
        levelMax = 4,
        spawnInterval = 40.8f,
        mapId = 1,

    };

}




public class Maps : MonoBehaviour
{
    public Sprite[] tileSprites;
    public Sprite[] tileTypeSprites;

    public AllMaps allMaps = new AllMaps();
    public Dictionary<string, MapInfo> allMapsDict = new Dictionary<string, MapInfo>();
    public Dictionary<int, Sprite> allTileSpritesDict = new Dictionary<int, Sprite>();
    public Dictionary<int, Sprite> tileTypeSpritesDict = new Dictionary<int, Sprite>();


    private void Awake()
    {
        for (int i = 0; i < tileSprites.Length; i++)
        {
            allTileSpritesDict.Add(i +1, tileSprites[i]);
        }

        for (int i = 0; i < tileTypeSprites.Length; i++)
        {
            tileTypeSpritesDict.Add(i + 1, tileTypeSprites[i]);
        }


        AddAllMaps();
        
    }

    public void AddAllMaps()
    {
        allMapsDict.Add(allMaps.TestMap.mapName, allMaps.TestMap);
        allMapsDict.Add(allMaps.DualPath.mapName, allMaps.DualPath);
    }

}
